import io
import logging
import statistics
from datetime import datetime, timedelta

import matplotlib.pyplot as plt
import mplcyberpunk
from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    BufferedInputFile,
    InputFile,
    KeyboardButton,
    ReplyKeyboardMarkup,
)

from app.database import get_database_connection
from app.handlers.start import get_main_keyboard

import random

logger = logging.getLogger(__name__)

plt.style.use("cyberpunk")

class SurveyState(StatesGroup):
    in_progress = State()

BUTTON_TEXTS = {
    1: "üò≠",
    2: "üôÅ",
    3: "üòê",
    4: "üôÇ",
    5: "ü§©",
}

BUTTON_TEXTS2 = {
    1: "—É–∂–∞—Å–Ω–æ",
    2: "–ø–ª–æ—Ö–æ",
    3: "–Ω–æ—Ä–º–∞–ª—å–Ω–æ",
    4: "—Ö–æ—Ä–æ—à–æ",
    5: "–æ—Ç–ª–∏—á–Ω–æ",
}

WEEKDAYS = {
    "Mon": "–ü–Ω",
    "Tue": "–í—Ç",
    "Wed": "–°—Ä",
    "Thu": "–ß—Ç",
    "Fri": "–ü—Ç",
    "Sat": "–°–±",
    "Sun": "–í—Å",
}

positive_motivations = [
    "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üòç",
    "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! üëè",
    "–ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–∏—è—Ç—å! ‚òÄÔ∏è",
    "–¢–≤–æ–∏ —É—Å–∏–ª–∏—è –ø—Ä–∏–Ω–æ—Å—è—Ç –ø–ª–æ–¥—ã! üòâ",
    "–î–µ—Ä–∂–∏—Å—å –∫—Ä–µ–ø–∫–æ! üòÅ",
    "–ö–∞–∂–¥–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤–∞–∂–Ω–æ! ‚òùÔ∏è",
    "–¢—ã –≤ —Ö–æ—Ä–æ—à–µ–π —Ñ–æ—Ä–º–µ! üí™",
    "–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è! üèÉ",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –¥—Ä—É–≥–∏—Ö! üòå",
    "–£–ø–æ—Ä—Å—Ç–≤—É–µ—à—å, –∏ —ç—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! üëç",
    "–†–∞–¥–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º —à–∞–≥–µ! üòÑ",
    "–ü—É—Å—Ç—å —Ç–≤–æ–π —Å–≤–µ—Ç —Å–≤–µ—Ç–∏—Ç —è—Ä—á–µ! ‚òÄÔ∏è",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–π —à–∞–Ω—Å! üòâ",
    "–¢—ã —Å–æ–∑–¥–∞–µ—à—å —Å–≤–æ—ë —Å—á–∞—Å—Ç—å–µ! üòâ",
    "–î–æ—Å—Ç—É–ø–Ω–æ –≤—Å—ë, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å! üòá"
]

negative_motivations = [
    "–≠—Ç–æ –ª–∏—à—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏! ü´†",
    "–ö–∞–∂–¥—ã–π –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å–ª–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ ü´†",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –æ —Å–≤–æ–∏—Ö —É—Å–ø–µ—Ö–∞—Ö! üèÉ",
    "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è, —á—Ç–æ —Ç–µ–±—è –æ–≥–æ—Ä—á–∞–µ—Ç üôÅ",
    "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üí™",
    "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–≤–æ–∏ —Ö–æ—Ä–æ—à–∏–µ –º–æ–º–µ–Ω—Ç—ã! üëÄ",
    "–î–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É üìà",
    "–ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üò¥",
    "–í—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏ ‚è∞",
    "–ë—É—Ä—è —Å—Ç–∏—Ö–Ω–µ—Ç, –∏ –≤—Å—ë —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ! ‚òÄÔ∏è",
    "–ó–Ω–∞–π, —Ç—ã –Ω–µ –æ–¥–∏–Ω! ü´Ç",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äì –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å üëΩ",
    "–ù–µ –±–æ–π—Å—è –ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏ ü§ù",
    "–î–∞–≤–∞–π –Ω–∞–π–¥–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ ü§ù",
    "–í–µ—Ä—å –≤ —Å–µ–±—è –∏ —Å–≤–æ–∏ —Å–∏–ª—ã! üôè"
]

delta = timedelta(hours=3)

crat = "created_at"
a = "%a"

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
        KeyboardButton(text=BUTTON_TEXTS[1]),
        KeyboardButton(text=BUTTON_TEXTS[2]),
        KeyboardButton(text=BUTTON_TEXTS[3]),
        KeyboardButton(text=BUTTON_TEXTS[4]),
        KeyboardButton(text=BUTTON_TEXTS[5])
        ],
    ],
    resize_keyboard=True,
)


async def create_mood_chart(results):
    if not results:
        return None

    dates = [(row["created_at"] + delta) for row in results]
    moods = [row["answer"] for row in results]

    plt.figure(figsize=(10, 5))
    plt.plot(dates, moods, marker="o", linestyle="-", color="#FE53BB")
    plt.title("–ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    plt.yticks(range(1, 6), [BUTTON_TEXTS2[i] for i in range(1, 6)]) 
    plt.grid(True)
    mplcyberpunk.make_lines_glow()
    mplcyberpunk.add_gradient_fill(alpha_gradientglow=0.38)
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()

    return buf


async def calculate_mood_trend(results): 
    if not results:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    mid_point = len(results) // 2
    first_half = results[:mid_point]
    second_half = results[mid_point:]

    avg_first_half = (
        sum(row["answer"] for row in first_half) / len(first_half) if first_half else 0
    )
    avg_second_half = (
        sum(row["answer"] for row in second_half) / len(second_half)
        if second_half
        else 0
    )

    if avg_second_half > avg_first_half:
        return "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π"
    elif avg_second_half < avg_first_half:
        return "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"
    else:
        return "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π"


async def calculate_mood_stability(results): 
    if not results:
        return None

    answers = [row["answer"] for row in results]
    return statistics.stdev(answers) if len(answers) > 1 else 0


async def calculate_weighted_average(results): 
    total_weighted_sum = 0
    total_weight = 0

    for row in results:
        created_at = row["created_at"]
        answer = row["answer"]

        days_ago = (datetime.now() - created_at).days
        if days_ago <= 2:
            weight = 1.5 
        else:
            weight = 1.0

        total_weighted_sum += answer * weight
        total_weight += weight

    if total_weight == 0:
        return None 

    return total_weighted_sum / total_weight


async def send_stats(message: types.Message):
    db = await get_database_connection()
    try:
        user_id = message.from_user.id
        results = await db.fetch(
            """
            SELECT answer, created_at FROM survey_results
            WHERE user_id = $1 AND created_at >= NOW() - INTERVAL '7 days'
            ORDER BY created_at
            """,
            user_id,
        )

        if results:
            stats = "\n".join(
                [
                    f"{(row[crat] + delta).strftime(f'{WEEKDAYS[(row[crat] + delta).strftime(a)]} %d.%m, %H:%M')} - {BUTTON_TEXTS[row['answer']]}"
                    for row in results
                ]
            )

            weighted_avg = await calculate_weighted_average(results)
            weighted_avg_text = (
                BUTTON_TEXTS[round(weighted_avg)] if weighted_avg else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            )

            trend = await calculate_mood_trend(results)
            
            if trend == "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π" or round(weighted_avg) == 1 or round(weighted_avg) == 2:
                phrase = random.choice(negative_motivations)
            else: 
                phrase = random.choice(positive_motivations)

            stability = await calculate_mood_stability(results)
            stability_text = (
                f"{stability:.2f}" if stability is not None else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            )

            message_text = (
                f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n{stats}\n\n"
                f"–í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {weighted_avg_text}\n"
                f"–¢—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {trend}\n"
                f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {stability_text}"
            )
            await message.reply(message_text)

            chart = await create_mood_chart(results)
            if chart:
                await message.answer_photo(
                    photo=BufferedInputFile(
                        chart.getvalue(), filename="mood_chart.png"
                    ),
                    caption="–ì—Ä–∞—Ñ–∏–∫ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é:",
                )
                await message.answer(phrase)
        else:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    finally:
        await db.close()



async def survey_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await message.reply(
        "–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è? –í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫:", reply_markup=keyboard
    )
    await state.set_state(SurveyState.in_progress)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


async def handle_survey_response(message: types.Message, state: FSMContext):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_survey_response –≤—ã–∑–≤–∞–Ω")
    mood = None

    if message.text == BUTTON_TEXTS[1]:
        mood = 1
    elif message.text == BUTTON_TEXTS[2]:
        mood = 2
    elif message.text == BUTTON_TEXTS[3]:
        mood = 3
    elif message.text == BUTTON_TEXTS[4]:
        mood = 4
    elif message.text == BUTTON_TEXTS[5]:
        mood = 5

    logger.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}")

    if mood:
        try:
            db = await get_database_connection()
            user_id = message.from_user.id

            user_exists = await db.fetchval(
                """
                SELECT id FROM users WHERE id = $1
                """,
                user_id,
            )

            if not user_exists:
                await message.reply(
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register."
                )
                return 

            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {mood}")
            await db.execute(
                """
                INSERT INTO survey_results (user_id, answer)
                VALUES ($1, $2)
                """,
                user_id,
                mood,
            )
            await message.reply(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {BUTTON_TEXTS[mood]}",
                reply_markup=get_main_keyboard(),  
            )

            await state.clear()
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
            await message.reply(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard(), 
            )
    else:
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {message.text}"
        )
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–º–∞–π–ª–∏–∫–æ–≤.",
            reply_markup=keyboard,  
        )


def register_handlers(dp: Dispatcher):
    dp.message.register(survey_handler, Command("survey"))
    dp.message.register(handle_survey_response, SurveyState.in_progress)
    dp.message.register(send_stats, Command("stats"))
